@model FileManagmentSystem.App.ViewModels.FileViewModels.FileEditVM

@{
    ViewBag.Title = "Edit";
}

@using (Html.BeginForm("Edit", "File", FormMethod.Post, new { enctype = "multipart/form-data", id = "uploadForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>File</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.FileName)
        @Html.HiddenFor(model => model.CreatedOn)
        @Html.HiddenFor(model => model.LastChangedOn)

        @if (Model.Id <= 0)
        {
            <div class="form-group">
                <label class="control-label col-md-2" for="file">File(Maximum of 2GB)</label>
                <div class="col-md-10">
                    <input type="file" class="btn btn-default btn-file" name="file" id="file" onchange="setUploadButtonState()" />
                    <span class="text-danger field-validating-error" id="fileValidating" style="display: none">
                        <span for="File name:" class="">
                            File Must be MAXIMUM 2GB!
                        </span>
                    </span>
                </div>
            </div>
        }

        <div class="form-group">
            @Html.LabelFor(model => model.FileNameGivenByUser, "File name:", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FileNameGivenByUser, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FileNameGivenByUser, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Description, "Description", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Description, 5, 50, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Category, "Category", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.Category, null, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Category, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" id="upload" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}
<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        function setUploadButtonState() {
            var maxFileSize = '2147483647';
            var fileUpload = $('#file');

            if (fileUpload.val() == '') {
                return false;
            }
            else {
                if ((fileUpload[0].files[0].size / 1024) < maxFileSize) {
                    $('#fileValidating').hide();
                    $('#upload').prop('disabled', false);
                    return true;
                }
                else {
                    $('#fileValidating').show();
                    $('#upload').prop('disabled', true);
                    return false;
                }
            }
        }
    </script>
}